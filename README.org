* Cl-ownpress 

#+begin_quote
⚠️ Published documentation might be lying. I am in middle of re-doing the architecture (including the
public API) of cl-ownpress, and am doing docs-first test-driven development. Once I am happy with
it, I will create a 1.0 release and do future releases in release branches.
#+end_quote

#+begin_quote
⚠️ Under active development. API/architecture might change without warning.
#+end_quote

Practically, cl-ownpress is a static site generator.

Theoretically, its primary objective is to

#+begin_quote
Give hackers the ability to publish their content while maintaining its ownership.
#+end_quote

** Goals

1. Paramount Hack-ability

   Tweaking isn't sufficient. Hackers should have the freedom of extend, replace
   and bend the system to their will.

2. Friction-free development experience

   Ability to hack isn't sufficient. Hacking experience should be pleasant. 

3. Just-works user experience

   Although cl-ownpress primarily targets software hackers, that does not mean it gets to ignore
   user-experience. Only using the software (i.e without any desire to hack it further) should
   achieve the "just works" standard.

4. Content ownership

   As users of the internet, we publish a lot of content on the web. It almost always end up in a
   walled platform, at the mercy of someone-not-you's whims. Cl-ownpress should bring ownership of
   user's published content back to user.

** Current state

I am using cl-ownpress to create [[https://bitspook.in/][my personal website]].

Right now cl-ownpress is moving forward to allow me achieve my desired publishing workflow.

- Publish with full power of Emacs
  
  Most of my writing happens in org-mode. I often tinker it to a great extent,
  to keep capturing my thoughts/experiments fluent in my computing workflow.
  I want to turn this liability into an asset. 

  #+begin_quote 
  *Status*: Done

  *org-file-provider* allow publishing a directory full of org files to HTML,
  delegating the responsibility of actual org->HTML conversion to Emacs itself.
  #+end_quote

- Publish a subset of my notes on my blog

  I have a fluent [[https://en.wikipedia.org/wiki/Zettelkasten][zettlekasten]]-like note-taking system for capturing my
  thoughts. Almost all my blog posts are edited versions of these. I want to
  publish notes which mature enough.

  I also want to publish any linked notes, but in a "certain" way. e.g they
  should be published, but not listed anywhere on the blog/rss-feeds etc.
  
  #+begin_quote
  *Status*: Done

  *org-denote-provider* allow publishing notes with specific tags to be
  published as blog posts. Any notes linked inside these notes are published,
  but not listed (configurable) in any listings (tags, categories, home-page).
  #+end_quote

- Publish my personal projects

  In addition to taking ownership of where my projects are presented (I might
  switch away from Github), I want a place where I can express more about my
  projects. A place to document inception of an idea, its evolution, fantasies
  about a glorious future; things which aren't exactly documentation.

  It is easily achievable with just a tag on a blog-post, but I think much can
  be achieved with better presentation.

  #+begin_quote
  *Status*: TODO
  #+end_quote

- Publish my toots

  Tooting is convenient, I want my tweets published as micro-posts on my blog until I can turn it
  around and start publishing my micro-blog posts on mastodon instead.

  #+begin_quote
  *Status*: TODO
  #+end_quote

- Publish discussions from other platforms

  Often, a lot of value can be found in the discussions that a piece of content births on platforms
  like Hacker News and Reddit. I want these tracked and presented with the published content itself.

  I am still debating whether the discussions themselves should also be retrieved and published
  along with the content.

  #+begin_quote
  *Status*: TODO
  #+end_quote

- Publish my personal growth

  This is one of the trickiest, and most unclear things I want to achieve on my personal site. I am
  letting it stay in the back of my head and brew for now.

  #+begin_quote
  *Status*: TODO
  #+end_quote

* Software Architecture

Cl-ownpress enables building [[https://en.wikipedia.org/wiki/Extract,_transform,_load][ETL]] pipeline meant for publishing content. It enable a very simple
use-case:

1. Extract data from multiple sources. e.g. from a [[https://protesilaos.com/emacs/denote][Denote]] direcotry
2. Transform, enhance and collect it e.g collect e.g enhance collected notes with more information
   to create instances of =blog-post=
3. Use it to publish artifacts e.g convert =blog-post='s to HTML+CSS+JS+Image files

Core concepts

1. =Provider=

   A provider provides content. It reaches the source, collect, sanitize and stores the content in a
   way which loses as little information from the source as possible. =Provider=-s are specialized
   for the source, not the destination. For example, A =DenoteNote= should represents a note, not a
   blog post which can be created using it.

2. =Publishable=

   Anything that inherits from =Publishable= class is meant to be published. A =Publishable=
   satisfies certain constraints:

   1. =uri=

      Every =Publishable= has a universal resource identifier, where universe is the current
      publishing session. It is called a =URI= instead of ID or UUID because:
      
      1. It should human readable
      2. It should be a UNIX path

      =uri= deterministically decides where a =Publishable= shall be published to. 

   A =Publishable= can be converted from data provided by a =Provider=, or a =Provider= might choose
   to directly produce =Publishable=-s.

3. =Publisher=

   A publisher publishes the =Publishable=-s to produce final results. It might be a HTML page, a
   ledger file, or a complete website.

   Data provided by a single provider might produce multiple =Publishable=-s, which get published by
   multiple =Publisher=-s.

   
   

