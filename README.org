* Cl-ownpress 

#+begin_quote
/⚠️Warning⚠️/: Under active development. API/architecture might change without warning.
#+end_quote

Practically, cl-ownpress is a static site generator.

Theoretically, its primary objective is to
#+begin_quote
Give hackers the ability to publish their content while maintaining its
ownership.
#+end_quote

** Goals

1. Paramount Hack-ability

   Tweaking isn't sufficient. Hackers should have the freedom of extend, replace
   and bend the system to their will.

2. Friction-free development experience

   Ability to hack isn't sufficient. Hacking experience should be pleasant. 

3. Just-works user experience

   Although cl-ownpress primarily targets software hackers, that does not mean
   it gets to ignore user-experience. Only using the software (i.e without any
   desire to hack it further) should achieve the "just works" standard.

4. Content ownership

   As users of the internet, we publish a lot of content on the web. It almost
   always end up on a walled platform, at the mercy of someone-not-you's whims.
   Cl-ownpress should make effort to bring ownership of user's published content
   back to user.

** Current state

I am using cl-ownpress to create [[https://bitspook.in/][my personal website]]. Right now cl-ownpress is
moving forward to allow me achieve my desired publishing workflow.

- Publish with full power of Emacs
  
  Most of my writing happens in org-mode. I often tinker it to a great extent,
  to keep capturing my thoughts/experiments fluent in my computing workflow.
  I want to turn this liability into an asset. 

  #+begin_quote 
  *Status*: Done

  *org-file-provider* allow publishing a directory full of org files to HTML,
  delegating the responsibility of actual org->HTML conversion to Emacs itself.
  #+end_quote

- Publish a subset of my notes on my blog

  I have a fluent [[https://en.wikipedia.org/wiki/Zettelkasten][zettlekasten]]-like note-taking system for capturing my
  thoughts. Almost all my blog posts are edited versions of these. I want to
  publish notes which mature enough.

  I also want to publish any linked notes, but in a "certain" way. e.g they
  should be published, but not listed anywhere on the blog/rss-feeds etc.
  
  #+begin_quote
  *Status*: Done

  *org-roam-provider* allow publishing notes with specific tags to be published
  as blog posts. Any notes linked inside these notes are published, but not
  listed (configurable) in any listings (tags, categories, home-page).
  #+end_quote

- Publish my personal projects

  In addition to taking ownership of where my projects are presented (I might
  switch away from Github), I want a place where I can express more about my
  projects. A place to document inception of an idea, its evolution, fantasies
  about a glorious future; things which aren't exactly documentation.

  It is easily achievable with just a tag on a blog-post, but I think much can
  be achieved with better presentation.

  #+begin_quote
  *Status*: TODO
  #+end_quote

- Publish my tweets

  Tweeting is convenient, I want my tweets published as micro-posts on my blog
  until I can turn it around and build a mobile app to publish my micro-blog
  posts on twitter instead.

  #+begin_quote
  *Status*: TODO
  #+end_quote

- Publish discussions from other platforms

  Often, a lot of value can be found in the discussions that a piece of content
  births on platforms like Hacker News and Reddit. I want these tracked and
  presented with the published content itself.

  I am still debating whether the discussions themselves should also be
  retrieved and published along with the content.

  #+begin_quote
  *Status*: TODO
  #+end_quote

- Publish my personal growth

  This is one of the trickiest, and most unclear things I want to achieve on my
  personal site. I am letting it stay in the back of my head and brew for now.

  #+begin_quote
  *Status*: TODO
  #+end_quote


* Software Architecture

Clownpress itself is not much more than a collection of utilities. It provides
some convenient constructs to achieve its goals, but bulk of the work is done by
its various components.

1. Provider

   A provider provides content. It reaches the source, collect, sanitize and
   stores the content hacker wants ownership on. For example =*fs-provider*=
   allows the ability to provide blog posts saved as text files on hacker's
   file-system.

2. Publisher

   A publisher converts saved content into publishable assets. To publish
   something has a very vague meaning, and that is intentional. e.g a publisher
   might create a complete blog website ready to be shared online.

** Why sqlite?

- For momentum. Things sqlite is being used for right now can very well be done
  without it, but it'll take work.
- For prototyping. I have some ideas I want to explore, and sqlite requires
  minimum amount of work to do that.
- To maintain a snapshot of content to be published, since the source of content
  might not be available all the time, or is costly to retrieve. (This could
  also be done by creating new files on filesystem though, I am still debating
  whether that should be the way to go)
  
Once I have a good hold on the scope of the project, we'll revisit the decision
of having a database file, or operate only on files in filesystem to build a
form of in-memory database every time.
